# 全局配置
global
    # 将日志输出到本地地址 127.0.0.1，日志级别local2
    log         127.0.0.1 local2
    # 指定HAProxy运行时的根目录
    chroot      /var/lib/haproxy
    # 指定HAProxy进程ID的文件路径
    pidfile     /var/run/haproxy.pid
    # 设置HAProxy处理的最大连接数
    maxconn     4000
    # 指定HAProxy进程运行的用户和组
    user        haproxy
    group       haproxy
    # 将HAProxy进程设置为后台运行的守护进程
    daemon
    # 开启Unix域套接字，用于实时查看HAProxy的状态和性能统计信息
    stats socket /var/lib/haproxy/stats
    # 设置HAProxy默认的SSL/TLS加密套件
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM
defaults 
        mode tcp
        retries 3
        timeout connect 10s
        timeout client 20s
        timeout server 30s
        timeout check 5s
frontend www-https
   # 监听IPv6地址 ::：的端口443，并期望TCP流量
   bind :443
   # 指定5秒的检查延迟，并检查SSL hello消息以确定客户端是否试图建立SSL/TLS连接
   tcp-request inspect-delay 5s
   tcp-request content accept if { req.ssl_hello_type 1 }
   # 如果客户端不试图建立SSL/TLS连接，则将流量发送到ocserv-udp后端
   use_backend ocserv-tcp if  !{ req.ssl_hello_type 1 } !{ req.len 0 }
   # 检查req_ssl_sni是否匹配vpn.xx.com。 如果匹配，则将流量发送到ocserv后端，该后端侦听127.0.0.1:4443，并向服务器发送代理协议头
   acl vpn-app req_ssl_sni -i vpn.xx.com
   option ssl-hello-chk
   use_backend ocserv-tcp
   # 默认后端
   default_backend ocserv-tcp

backend ocserv-tcp
	# 指定ocserv-tcp后端的模式为TCP
	mode tcp
	# 启用SSL hello消息检查，允许前端确定客户端是否试图建立SSL/TLS连接
	option ssl-hello-chk
	# 定义服务器ocserv为127.0.0.1:4443，并发送代理协议头
	server jp1 10.187.71.4:443 send-proxy-v2	 
    #server jp2 10.187.71.5:443 send-proxy-v2
