frontend www-https
   # 监听IPv6地址 ::：的端口443，并期望TCP流量
   bind :443
   # 指定5秒的检查延迟，并检查SSL hello消息以确定客户端是否试图建立SSL/TLS连接
   tcp-request inspect-delay 5s
   tcp-request content accept if { req.ssl_hello_type 1 }
   # 如果客户端不试图建立SSL/TLS连接，则将流量发送到ocserv-udp后端
   use_backend ocserv-udp if  !{ req.ssl_hello_type 1 } !{ req.len 0 }
   # 检查req_ssl_sni是否匹配vpn.xx.com。 如果匹配，则将流量发送到ocserv后端，该后端侦听127.0.0.1:4443，并向服务器发送代理协议头
   acl vpn-app req_ssl_sni -i vpn.xx.com
   option ssl-hello-chk
   use_backend ocserv-tcp

   # 接受TCP请求，并根据配置发送到不同的backend
   use_backend ocserv-tcp if { tcp }
   # 接受UDP请求，并根据配置发送到不同的backend
   use_backend ocserv-udp if { udp }

backend ocserv-tcp
	# 指定ocserv-tcp后端的模式为TCP
	mode tcp
	# 启用SSL hello消息检查，允许前端确定客户端是否试图建立SSL/TLS连接
	option ssl-hello-chk
	# 定义服务器ocserv为127.0.0.1:4443，并发送代理协议头
	server jp1 10.187.71.4:443 send-proxy-v2	 
    server jp2 10.187.71.5:443 send-proxy-v2

backend ocserv-udp
	# 指定ocserv-udp后端的模式为udp
    mode udp
    # 定义服务器ocserv-udp服务器组
    server jp1 10.187.71.4:443 send-proxy-v2
    server jp2 10.187.71.5:443 send-proxy-v2
